# -*- coding: utf-8 -*-
"""A4_functions_tkalec.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IaPC6Wvr8kvRzaZWSs6rGLUmeXfUGByi
"""

!pip install meteostat

"""## My first function: *location_coordinates*
Since we are mostly working with meteostat in our group project, I wanted to automate the process of **getting the needed coordinates for a certain weather station/location**. This helps in the next steps, to retrieve data for a given location. The output of this first function can be directly used for other functions later on in this project.

> *Note: Since this course is my first one where I work with Python and this is also my first semester with coding, a lot of comments will be present in the code to help me understand and remember each step.*
"""

"""
This script retrieves data from meteostat like coordinates, temperature,
precipitation, wind, snow and sun. It generates a DataFrame values over a
selected time period and does basic calculations for rainy days or average
temperatures over the given time period.


Functions:
    location_coordinates(station_name): Retrieves the coordinates of a weather station.
    get_daily_weather_data(latitude, longitude, start_date, end_date): Fetches daily weather data for a location and date range.
    get_average_temperature(data): calculates the average temperature of the specified date range.
    count_rainy_days(data): Calculates the amount of rainy days within the specified date range.
"""

# importing; Point, Daily and Stations will be used in/for the functions, pandas for the DataFrame and datetime for string conversion
from meteostat import Point, Daily
from meteostat import Stations
import pandas as pd
from datetime import datetime


def location_coordinates(station_name):
    """ This is a function that retrieves the coordinates of a weather station.

    Args:
        location_name (str): The name of the location (e.g., "Salzburg").

    Returns:
        dict: A dictionary with the station name, latitude, and longitude.
    """

    # Initialize a Stations object (variable stations)
    stations = Stations()

    # fetching all stations fist (variable all_stations)
    all_stations = stations.fetch()

    # filtering stations by name + making it case insensitive ()
    matching_stations = all_stations[all_stations['name'].str.contains(station_name, case=False, na=False)]

    # checking if the matching_stations are not empty
    if not matching_stations.empty:
        # getting the first matching station (on the first row/index = [0})
        station_data = matching_stations.iloc[0]
        # dictionary for the name, lat. and long. for a station
        coordinates = {
            'name': station_data['name'],
            'lat': station_data['latitude'],
            'long': station_data['longitude']
        }
        # returning coordinates of the station
        return coordinates
    # else, when the matching stations are empty
    else:
        return None

# Entering the station_name (f.e. Salzburg) to retrieve it's coordinates (the function location_coordinates is used herefore)
station_name = "Salzburg"
coordinates = location_coordinates(station_name)
if coordinates:
    print(f"Coordinates for {station_name}: {coordinates}")
else:
    print(f"No station found")

"""## My second function: *get_weather_data*

This function is used to retrieve a DataFrame from meteostat with daily weather data (Temperature, Wind, Rain,...). The DataFrame can be used for further calculations and data visualizations (maps, graphs, tables,...).
"""

def get_weather_data(latitude, longitude, start_date, end_date):
    """
    Fetch daily weather data for a given latitude, longitude (of a weather station) and date range.

    Args:
        latitude (float): The latitude of the location.
        longitude (float): The longitude of the location.
        start_date (str): The start date in 'YYYY-MM-DD' format.
        end_date (str): The end date in 'YYYY-MM-DD' format.

    Returns:
        DataFrame: A pandas DataFrame containing daily weather data for the specified location and date range.
    """

    # Create a Point for the specified location (POINT from meteostat)
    location = Point(latitude, longitude)

    # Convert start_date and end_date from "string" to "datetime"
    start_date = datetime.strptime(start_date, '%Y-%m-%d')
    end_date = datetime.strptime(end_date, '%Y-%m-%d')

    # Fetch daily weather data (DAILY from meteostat)
    data = Daily(location, start_date, end_date)

    # Retrieve data from meteostat as a pandas DataFrame
    data = data.fetch()

    return data

if __name__ == "__main__":

    # Enter parameters here (lat, long, start_date, end_date), then
    weather_data = get_weather_data(47.8095, 13.0550, '2024-03-01', '2024-03-31')
    print(weather_data)

"""The second function uses four input parameters. In the next line, example input parameters for Salzburg have been used:"""

get_weather_data(47.8095, 13.0550, '2024-06-01', '2024-06-07')

"""## My third and fourth functions

The following two functions provide simple calculations of the average temperature and the number of rainy days at the specified date range at a certain location.
"""

def get_average_temperature(data):
    """
    Calculate the average temperature from the specified date range.

    Args:
    data (pd.DataFrame): A pandas DataFrame (from the previous function)

    Returns:
    float: The average temperature in degrees Celcius.
    """

    avg_temp = data[['tavg']].mean().iloc[0]
    return avg_temp

avgt = get_average_temperature(weather_data)

#print(f"Average Temperature over {start} and {end}: {average_temp:.1f} Â°C")
print(f"Average Temperature: {avgt:.1f} Â°C")

def count_rainy_days(data):
    """
    Count the number of rainy days from the given weather data.

    Args:
    data (pd.DataFrame): A pandas DataFrame containing weather data with a column 'prcp' for precipitation.

    Returns:
    int: The number of days with precipitation greater than 0 and the percentage of rainy days.
    """

    rainy_days = data[data['prcp'] > 0].shape[0]
    return rainy_days

rainy_days = count_rainy_days(weather_data)
all_days = len(weather_data)
percent_rainy_days = (rainy_days / all_days) * 100

print(f"Number of Rainy Days: {rainy_days} ({percent_rainy_days:.1f}% rainy days)")

